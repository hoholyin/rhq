[{"/Users/hoholyin/Desktop/Personal/rhq/src/index.js":"1","/Users/hoholyin/Desktop/Personal/rhq/src/App.js":"2","/Users/hoholyin/Desktop/Personal/rhq/src/reportWebVitals.js":"3","/Users/hoholyin/Desktop/Personal/rhq/src/common.js":"4","/Users/hoholyin/Desktop/Personal/rhq/src/requestBuilder.js":"5","/Users/hoholyin/Desktop/Personal/rhq/src/Home.js":"6","/Users/hoholyin/Desktop/Personal/rhq/src/RHQLoader.js":"7","/Users/hoholyin/Desktop/Personal/rhq/src/mailslip.js":"8","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/orderSubmittedPage.js":"9","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/submitOrderPage.js":"10","/Users/hoholyin/Desktop/Personal/rhq/src/pages/performance/viewPerformance.js":"11","/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrders/pendingOrdersPage.js":"12","/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventory/checkInventoryPage.js":"13","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpenses/addExpensesPage.js":"14","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchase/addPurchasePage.js":"15","/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchase/managePurchasePage.js":"16","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/submitOrderForm.js":"17","/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrders/pendingOrdersList.js":"18","/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventory/InventoryList.js":"19","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchase/addPurchaseForm.js":"20","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpenses/addExpensesForm.js":"21","/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchase/pendingPurchaseList.js":"22","/Users/hoholyin/Desktop/Personal/rhq/src/pages/performance/performanceGraph.js":"23"},{"size":442,"mtime":1627027803034,"results":"24","hashOfConfig":"25"},{"size":2470,"mtime":1669449736330,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1626788179110,"results":"27","hashOfConfig":"28"},{"size":180206,"mtime":1674742445862,"results":"29","hashOfConfig":"25"},{"size":889,"mtime":1628694390333,"results":"30","hashOfConfig":"25"},{"size":1702,"mtime":1669450116140,"results":"31","hashOfConfig":"25"},{"size":556,"mtime":1652334142602,"results":"32","hashOfConfig":"25"},{"size":2473,"mtime":1662603958057,"results":"33","hashOfConfig":"25"},{"size":637,"mtime":1660184056968,"results":"34","hashOfConfig":"25"},{"size":815,"mtime":1660184056926,"results":"35","hashOfConfig":"25"},{"size":3775,"mtime":1669537820819,"results":"36","hashOfConfig":"25"},{"size":5208,"mtime":1669537918691,"results":"37","hashOfConfig":"25"},{"size":8416,"mtime":1669537668293,"results":"38","hashOfConfig":"25"},{"size":507,"mtime":1660184056964,"results":"39","hashOfConfig":"25"},{"size":813,"mtime":1660184056958,"results":"40","hashOfConfig":"25"},{"size":5689,"mtime":1660184056980,"results":"41","hashOfConfig":"25"},{"size":20306,"mtime":1674742445852,"results":"42","hashOfConfig":"25"},{"size":2725,"mtime":1672057415634,"results":"43","hashOfConfig":"25"},{"size":1399,"mtime":1669450596068,"results":"44","hashOfConfig":"25"},{"size":17300,"mtime":1671949262613,"results":"45","hashOfConfig":"25"},{"size":8441,"mtime":1669538631917,"results":"46","hashOfConfig":"25"},{"size":1670,"mtime":1660184056941,"results":"47","hashOfConfig":"25"},{"size":1520,"mtime":1665969175567,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"19x70hs",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"enfqkt",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93","usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"51"},"/Users/hoholyin/Desktop/Personal/rhq/src/index.js",[],["101","102"],"/Users/hoholyin/Desktop/Personal/rhq/src/App.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/reportWebVitals.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/common.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/requestBuilder.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/Home.js",["103"],"import logo from \"./assets/logo_transparent.png\";\nimport React, {useEffect} from \"react\";\nimport {createRequestOptions} from \"./requestBuilder\";\nimport {apiEndpoint, deviceWidth} from \"./common\";\n\nconst Home = (props) => {\n    useEffect(() => {\n        triggerBackend();\n    })\n\n    const triggerBackend = async () => {\n        const getBossNamesRO = createRequestOptions('GET')\n        await fetch(apiEndpoint + '/bossNames', getBossNamesRO)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"button-container\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <div className=\"button\" onClick={() => props.navigate(\"viewPerformance\")}>\n                    View Performance\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"checkInventory\")}>\n                    Check inventory\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"pendingOrders\")}>\n                    Pending Orders\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"submitOrder\")}>\n                    Submit an Order\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"addExpenses\")}>\n                    Add an Expense\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"addPurchase\")}>\n                    Add a Purchase\n                </div>\n                <div className=\"button\" onClick={() => props.navigate(\"managePurchase\")}>\n                    Manage Purchases\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/hoholyin/Desktop/Personal/rhq/src/RHQLoader.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/mailslip.js",["104"],"import {logoBase64} from \"./common\";\n\nconst { jsPDF } = require(\"jspdf\")\n\nexport const generateMailSlip = (orders) => {\n    if (orders.length === 0) {\n        return\n    }\n    const filename = orders[0].invoice\n    const doc = new jsPDF('l', \"mm\", [190, 105])\n    populateMailSlip(doc, orders[0])\n    orders.shift()\n\n    orders.forEach((order) => {\n        doc.addPage([190, 105], \"l\")\n        populateMailSlip(doc, order)\n    })\n    doc.save(filename + \".pdf\")\n}\n\nconst populateMailSlip = (doc, order) => {\n    doc.addImage(logoBase64, \"png\", 15, 37, 30, 30)\n    doc.setFont('Courier', 'bold')\n    doc.setFontSize(14)\n    doc.text(order.code, 10, 10)\n    doc.setFont('Courier', 'bold')\n    doc.setFontSize(28)\n    const addr = order.addr ? order.addr : \"\"\n    doc.text(\"Mailing Address:\\n\\n\" + formatAddress(addr), 48, 20)\n}\n\nconst formatAddress = (addr) => {\n    addr = addr.replace(\",\", \" \")\n    addr = addr.replaceAll(\"//\", \"\\n\")\n    console.log(addr)\n    let formatted = addr.split(\" \")\n    formatted = formatted.map((e) => {\n        e = e.trim()\n        if (e.includes(\"#\")) {\n            return \"\\n\" + e\n        }\n        if (e.includes(\"-\") && e.charAt(0) !== '#') {\n            return \"\\n#\" + e\n        }\n        if (e.toUpperCase() === \"SINGAPORE\") {\n            return \"\"\n        }\n        if (e.match(/^(\\d{6}|[sS]\\d{6})$/g)) {\n            return \"S(\" + e.match(/\\d{6}/g)[0] + \")\"\n        }\n        if (e.toUpperCase() === \"BLK\" || e.toUpperCase() === \"BLOCK\") {\n            return \"\\n\" + \"Blk\"\n        }\n        if (e.length > 0 && !isNaN(e.charAt(0))) {\n            return e\n        }\n        return e.charAt(0).toUpperCase() + e.slice(1)\n    })\n    formatted = formatted.map((e) => {\n        if (e.includes(\"(\") && e.includes(\")\")) {\n            return \"\\n\" + e\n        }\n        return e\n    })\n    formatted = formatted.join(\" \").trim()\n    // smart indent\n    let lines = formatted.split(\"\\n\")\n    let formattedLines = []\n    lines.forEach((line) => {\n        const words = line.split(\" \")\n        let window = \"\"\n        let next = 0\n        while (next !== -1) {\n            while (next !== -1  && (window + \" \" + words[next]).length < 23) {\n                window += \" \" + words[next]\n                next = next >= words.length - 1 ? -1 : next + 1\n            }\n            formattedLines.push(window.trimLeft())\n            window = \"\"\n        }\n    })\n    formattedLines = formattedLines.filter(l => l !== \"\")\n    return formattedLines.join(\"\\n\")\n}\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/orderSubmittedPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/submitOrderPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/performance/viewPerformance.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrders/pendingOrdersPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventory/checkInventoryPage.js",["105"],"import logo from \"../../assets/logo_transparent.png\";\nimport InventoryList from \"./InventoryList\";\nimport {\n    apiEndpoint,\n    containsWord,\n    generateInventoryListName,\n    isBossCorrect,\n    matchingSn,\n    updatePrice\n} from \"../../common\";\nimport {getRequest, postRequest} from \"../../requestBuilder\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./checkInventoryPage.css\"\nimport back from \"../../assets/back.png\";\nimport refresh from \"../../assets/refresh.png\";\nimport cross from \"../../assets/cross.png\";\nimport RHQLoader from \"../../RHQLoader\";\n\nconst CheckInventoryPage = (props) => {\n    const [inventoryList, setInventoryList] = useState([]);\n    const [allInventories, setAllInventories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [query, setQuery] = useState(\"\");\n    const [selectedCode, setSelectedCode] = useState(\"\")\n    const [selectedSn, setSelectedSn] = useState(\"\")\n    const [indicatorInformation, setIndicatorInformation] = useState([]);\n    const [isLoadingSelection, setIsLoadingSelection] = useState(true);\n    const [sellingPrice, setSellingPrice] = useState(\"$\")\n    const [oldSellingPrice, setOldSellingPrice] = useState(\"$\")\n    const [bossName, setBossName] = useState(\"\")\n    const [submitting, setSubmitting] = useState(false)\n\n    useEffect(() => {\n        refreshInventory();\n    }, [])\n\n    const search = (searchQuery) => {\n        setQuery(searchQuery)\n        if (searchQuery.trim() === \"\") {\n            setInventoryList(allInventories)\n            return\n        }\n        const allWords = searchQuery.split(\" \")\n        console.log(allInventories)\n        const filteredItems = allInventories.filter((e) => {\n            return containsWord(e, allWords) || matchingSn(e, searchQuery)\n        })\n        console.log(filteredItems)\n        setInventoryList(filteredItems)\n    }\n\n    const refreshInventory = async () => {\n        setIsLoading(true)\n        const inventoryListObject = await getRequest(apiEndpoint + '/inventory')\n        const allInventories = inventoryListObject.data.allInventories\n        allInventories.sort((a, b) => a.sn > b.sn)\n        allInventories.map((e) => {\n            e.name = e.code\n            e.name = e.name.replaceAll(\"NA\", \"\")\n            e.name = e.name.replaceAll(\"Phone accessories\", \"\")\n            e.name = e.name.replaceAll(\"Airpods case\", \"\")\n            e.name = e.name.replaceAll(\"Phone case\", \"\")\n            return e\n        })\n        setAllInventories(allInventories)\n        setInventoryList(allInventories)\n        setIsLoading(false)\n    }\n\n    const selectCode = async (code) => {\n        setSelectedCode(\"a\")\n        setIsLoadingSelection(true)\n        const requestObj = {\n            code: code\n        }\n        const sn = allInventories.filter(e => e.code === code)[0].sn\n        setSelectedSn(sn)\n        const allIndicatorsObject = await postRequest(apiEndpoint + '/indicator', requestObj)\n        const allIndicators = allIndicatorsObject.data.allIndicators.map((x) => {\n            return x.replaceAll(/\\s/g, '').length === 0 ? 0 : x;\n        })\n        const allIndicatorObjects = [\n            {\n                name: 'UNITS SOLD',\n                val: allIndicators[0]\n            },\n            {\n                name: 'STOCK',\n                val: allIndicators[1]\n            },\n            {\n                name: 'RESTOCK COUNT',\n                val: allIndicators[2]\n            },\n            {\n                name: 'MARGIN',\n                val: allIndicators[3]\n            }\n        ];\n        const sellingPriceRequestObj = {\n            code: code\n        }\n        const sellingPriceObj = await postRequest(apiEndpoint + '/getSellingPrice', sellingPriceRequestObj)\n        const sellingPrice = sellingPriceObj.data.sellingPrice\n        setSellingPrice(sellingPrice)\n        setOldSellingPrice(sellingPrice)\n        setIndicatorInformation(allIndicatorObjects)\n        setSelectedCode(code);\n        setIsLoadingSelection(false)\n    }\n\n    const unselectItem = () => {\n        setSelectedCode(\"\")\n    }\n\n    const updateSellingPrice = async () => {\n        setSubmitting(true)\n        const correctBoss = await isBossCorrect(bossName)\n        if (!correctBoss) {\n            setSubmitting(false)\n            return\n        }\n        const dataObject = {\n            code: selectedCode,\n            sellingPrice: sellingPrice\n        }\n        await postRequest(apiEndpoint + \"/setSellingPrice\", dataObject)\n        const sellingPriceRequestObj = {\n            code: selectedCode\n        }\n        const sellingPriceObj = await postRequest(apiEndpoint + '/getSellingPrice', sellingPriceRequestObj)\n        const localSellingPrice = sellingPriceObj.data.sellingPrice\n        setSellingPrice(localSellingPrice)\n        setOldSellingPrice(localSellingPrice)\n        setSubmitting(false)\n    }\n\n    const confirmationContainer = () => {\n        return (\n            <div className=\"confirmation-container\">\n                <span className=\"form-label\">Boss</span>\n                <div className=\"confirmation-input-row\">\n                    <input className=\"input-box\" type=\"text\" onChange={e => setBossName(e.target.value)}/>\n                    {submitting ? <RHQLoader message={\"\"}/> : <div className=\"form-button-confirmation\" onClick={updateSellingPrice}>Update Price</div> }\n                </div>\n            </div>\n        )\n    }\n\n    const selectedCodeModal = () => {\n        return (\n            <div className=\"inv-selected-code-modal\">\n                <div className=\"inv-selected-code-sn-and-btn-container\">\n                    <span className=\"inv-selected-code-sn\">{selectedSn}</span>\n                    <div className=\"inv-remove-selection\" onClick={() => unselectItem()}>\n                        <img src={cross} className=\"remove-selection-icon\" alt=\"logo\"/>\n                    </div>\n                </div>\n                <div className=\"inv-selected-code-heading\">\n                    <span className=\"inv-selected-item-name\">{generateInventoryListName(selectedCode)}</span>\n                </div>\n                <div className=\"indicator-container\">\n                    {indicatorInformation.map((obj) => {\n                        return (\n                            <div className=\"indicator-column\">\n                                <div className=\"indicator-header\">{obj.name}</div>\n                                <div className=\"indicator-value\">{obj.val}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div className=\"selling-price-container\">\n                    <div className=\"form-label-container\">\n                        <span className=\"selling-price-header\">SELLING PRICE</span>\n                    </div>\n                    <input className=\"input-box\" type=\"text\" value={sellingPrice} onChange={e => updatePrice(e.target.value, setSellingPrice)}/>\n                    {sellingPrice !== oldSellingPrice && confirmationContainer()}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"button-containers\">\n                <div className=\"back-button-container\" onClick={() => props.navigate(\"\")}>\n                    <img src={back} className=\"back-button interactive\" alt=\"back\"/>\n                </div>\n                <div className=\"refresh-button-container\" onClick={refreshInventory}>\n                    <img src={refresh} className=\"refresh-button interactive\" alt=\"refresh\"/>\n                </div>\n            </div>\n            <div className=\"logo-container interactive\" onClick={() => props.navigate(\"\")}>\n                <img src={logo} className=\"submit-order-app-logo\" alt=\"logo\"/>\n            </div>\n            {!isLoading && <input className=\"input-box-main\" type=\"text\" onChange={e => search(e.target.value)}/>}\n            {selectedCode !== \"\"\n                ? isLoadingSelection ? <RHQLoader message={\"Can wait abit anot...\"}/> : selectedCodeModal()\n                : null }\n            <div className=\"inventory-list-container\">\n                {isLoading\n                    ? <RHQLoader message={\"Getting inventory list...\"}/>\n                    : <InventoryList inventoryList={inventoryList} elementOnClick={selectCode} nameOnly={false}/>}\n            </div>\n        </div>\n    )\n}\n\nexport default CheckInventoryPage;\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpenses/addExpensesPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchase/addPurchasePage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchase/managePurchasePage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrder/submitOrderForm.js",["106","107"],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrders/pendingOrdersList.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventory/InventoryList.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchase/addPurchaseForm.js",["108"],"import React, {useEffect, useState} from \"react\";\nimport {getRequest, postRequest} from \"../../requestBuilder\";\nimport {\n    apiEndpoint,\n    checkItemRow, codeExists, containsWord,\n    createCode, generateMonth, generateNextCashInOutIndexNumber, generateSerialNumber,\n    generateTodayDate,\n    isBossCorrect,\n    isInteger,\n    isPrice, matchingSn, toLocObjectArray, toLocString,\n} from \"../../common\";\nimport cross from \"../../assets/cross.png\";\nimport RHQLoader from \"../../RHQLoader\";\nimport InventoryList from \"../checkInventory/InventoryList\";\nimport \"./addPurchasePage.css\"\n\nconst AddPurchaseForm = (props) => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [bossName, setBossName] = useState(\"\")\n    const [isWarningMessageVisible, setWarningMessageVisible] = useState(false)\n    const [warningMessage, setWarningMessage] = useState(\"\")\n\n    const [supplier, setSupplier] = useState(\"\")\n    const [invoiceNumber, setInvoiceNumber] = useState(\"\")\n    const [categoryList, setCategoryList] = useState([])\n    const [brandsList, setBrandsList] = useState([])\n    const [modelsList, setModelsList] = useState([])\n    const [colorsList, setColorsList] = useState([])\n    const [descsList, setDescsList] = useState([])\n    const [allInventories, setAllInventories] = useState([]);\n    const [inventoryList, setInventoryList] = useState([]);\n    const [query, setQuery] = useState(\"\");\n\n    const [itemList, setItemList] = useState([])\n    const [submitting, setSubmitting] = useState(false)\n\n    useEffect(() => {\n        loadDefaultProperties()\n    }, [])\n\n    const loadDefaultProperties = async () => {\n        setIsLoading(true)\n        const propertiesListObject = await getRequest(apiEndpoint + '/getProperties')\n        const allCategories = propertiesListObject.data.allCategories\n        const allBrands = propertiesListObject.data.allBrands\n        const allModels = propertiesListObject.data.allModels\n        const allColors = propertiesListObject.data.allColors\n        const allDescs = propertiesListObject.data.allDescs\n        setCategoryList(allCategories)\n        setBrandsList(allBrands)\n        setModelsList(allModels)\n        setColorsList(allColors)\n        setDescsList(allDescs)\n        const inventoryListObject = await getRequest(apiEndpoint + '/inventory')\n        const allInventories = inventoryListObject.data.allInventories\n        allInventories.map(e => {\n            e.name = e.code\n            return e\n        })\n        setAllInventories(allInventories)\n        setIsLoading(false)\n    }\n\n    const search = (searchQuery) => {\n        setQuery(searchQuery)\n        if (searchQuery === \"\") {\n            setInventoryList([])\n            return\n        }\n        const allWords = searchQuery.split(\" \")\n        const filteredItems = allInventories.filter((e) => {\n            return containsWord(e, allWords) || matchingSn(e, searchQuery)\n        })\n        setInventoryList(filteredItems)\n    }\n\n    const addItem = (isNewItem) => {\n        const oldItemList = itemList\n        const newItemList = [...oldItemList, {\n            newItem: isNewItem,\n            index: oldItemList.length,\n            category: \"\",\n            brand: \"\",\n            model: \"\",\n            color: \"\",\n            desc: \"\",\n            total_amt: \"$\",\n            qty: \"\",\n        }]\n        setItemList(newItemList)\n    }\n\n    const setProperty = (index, property, value) => {\n        const oldItemList = [...itemList]\n        if (property === \"total_amt\" && !isPrice(value)) {\n            return\n        }\n        if (property === \"qty\" && !isInteger(value) && value !== \"\") {\n            return\n        }\n        oldItemList[index][property] = value\n        setItemList(oldItemList)\n    }\n\n    const propertyListComponent = (index, property, propertyList) => {\n        const value = itemList[index][property]\n        if (value === \"\" || propertyList.includes(value.toUpperCase())) {\n            return\n        }\n        return (\n            propertyList.filter((e) => e.includes(value.toUpperCase())).map((e) => {\n                return (\n                    <div className=\"search-item-row\" onClick={() => setProperty(index, property, e)}>\n                        <span className=\"search-item-name\">{e}</span>\n                    </div>\n                )\n            })\n        )\n    }\n\n    const itemIsValid = (e) => {\n        return e.category !== \"\"\n            && e.brand !== \"\"\n            && e.model !== \"\"\n            && e.color !== \"\"\n            && e.desc !== \"\"\n            && e.total_amt !== \"$\"\n            && !isNaN(e.qty)\n            && parseInt(e.qty) > 0\n    }\n\n    const canSubmit = () => {\n        const allBlanksFilled = itemList.map((e) => itemIsValid(e)).filter((b) => !b).length === 0\n        return itemList.length > 0\n            && bossName !== \"\"\n            && allBlanksFilled\n            && supplier !== \"\"\n            && invoiceNumber !== \"\"\n            && submitting === false\n    }\n\n    const deleteItem = (index) => {\n        const oldItemList = [...itemList]\n        const newItemList = oldItemList.filter((e) => e.index !== index).map((e) => {\n            e.index = e.index > index ? e.index - 1 : e.index\n            return e\n        })\n        setItemList(newItemList)\n    }\n\n    const selectCode = (index, code) => {\n        const allProperties = code.split(\"-\")\n        setProperty(index, \"category\", allProperties[0])\n        setProperty(index, \"brand\", allProperties[1])\n        setProperty(index, \"model\", allProperties[2])\n        setProperty(index, \"color\", allProperties[3])\n        setProperty(index, \"desc\", allProperties[4])\n    }\n\n    const generateExistingItem = (index) => {\n        const item = itemList[index]\n        const code = createCode(item.category, item.brand, item.model, item.color, item.desc)\n        if (code === \"----\") {\n            // have not selected an item\n            return (\n                <div className=\"purchase-item-inventory-list\">\n                    <span className=\"form-label\">Search code</span>\n                    <input className=\"input-box\" type=\"text\" onChange={e => search(e.target.value)}/>\n                    {query === \"\" ? <div /> : (\n                        <InventoryList inventoryList={inventoryList} elementOnClick={(code) => selectCode(index, code)} nameOnly={true}/>\n                    )}\n                </div>\n            )\n        }\n        const processedCode = code.replace(/-/g, \"\\n\").replace(/NA\\n/g, \"\")\n        return (\n            <div className=\"selected-code-list\">\n                <div className=\"purchase-selected-code-modal\">\n                    <span className=\"purchase-selected-item-name\">{processedCode}</span>\n                    <div className=\"existing-purchase-container\">\n                        <span className=\"form-label\">Total Amount</span>\n                        <input className=\"input-box\" type=\"text\" value={itemList[index].total_amt} onChange={e => setProperty(index, \"total_amt\", e.target.value)}/>\n                    </div>\n                    <div className=\"existing-purchase-container\">\n                        <span className=\"form-label\">Quantity</span>\n                        <input className=\"input-box\" type=\"text\" value={itemList[index].qty} onChange={e => setProperty(index, \"qty\", e.target.value)}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    const itemPropertiesComponent = (index) => {\n        return (\n            <div>\n                <div className=\"purchase-item-header-row\">\n                    <span className=\"purchase-item-header\">{\"Item #\" + (index + 1)}</span>\n                    <div className=\"remove-selection\" onClick={() => {deleteItem(index)}}>\n                        <img src={cross} className=\"remove-selection-icon\" alt=\"logo\"/>\n                    </div>\n                </div>\n                {!itemList[index].newItem\n                    ? generateExistingItem(index)\n                    : (\n                        <div>\n                            <span className=\"form-label\">Category</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].category} onChange={e => setProperty(index, \"category\", e.target.value)}/>\n                            {propertyListComponent(index, \"category\", categoryList)}\n                            <span className=\"form-label\">Brand</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].brand} onChange={e => setProperty(index, \"brand\", e.target.value)}/>\n                            {propertyListComponent(index, \"brand\", brandsList)}\n                            <span className=\"form-label\">Model</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].model} onChange={e => setProperty(index, \"model\", e.target.value)}/>\n                            {propertyListComponent(index, \"model\", modelsList)}\n                            <span className=\"form-label\">Colour</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].color} onChange={e => setProperty(index, \"color\", e.target.value)}/>\n                            {propertyListComponent(index, \"color\", colorsList)}\n                            <span className=\"form-label\">Description</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].desc} onChange={e => setProperty(index, \"desc\", e.target.value)}/>\n                            {propertyListComponent(index, \"desc\", descsList)}\n                            <span className=\"form-label\">Total Amount</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].total_amt} onChange={e => setProperty(index, \"total_amt\", e.target.value)}/>\n                            <span className=\"form-label\">Quantity</span>\n                            <input className=\"input-box\" type=\"text\" value={itemList[index].qty} onChange={e => setProperty(index, \"qty\", e.target.value)}/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n\n    const submitPurchase = async () => {\n        setSubmitting(true)\n        const correctBoss = await isBossCorrect(bossName)\n        if (!correctBoss) {\n            setWarningMessage(\"Incorrect boss\")\n            setWarningMessageVisible(true)\n            setSubmitting(false)\n            return\n        }\n        const itemListCoded = itemList.map((item) => {\n            item.code = createCode(\n                item.category.toUpperCase(),\n                item.brand.toUpperCase(),\n                item.model.toUpperCase(),\n                item.color.toUpperCase(),\n                item.desc.toUpperCase()\n            )\n            return item\n        })\n        // update new cost first\n        const today = generateTodayDate()\n        for (let i = 0; i < itemListCoded.length; i++) {\n            const item = itemListCoded[i]\n            const itemExists = await codeExists(item.code)\n            if (!itemExists) {\n                const newSn = await generateSerialNumber(item.brand.toUpperCase(), item.category.toUpperCase())\n                const addItemObj = {\n                    sn: newSn,\n                    category: item.category.toUpperCase(),\n                    brand: item.brand.toUpperCase(),\n                    model: item.model.toUpperCase(),\n                    color: item.color.toUpperCase(),\n                    desc: item.desc.toUpperCase(),\n                    month: generateMonth()\n                }\n                await postRequest(apiEndpoint + '/inventory', addItemObj)\n                const serialNumberObj = {\n                    sn: newSn,\n                    code: item.code\n                }\n                await postRequest(apiEndpoint + '/serialNumbers', serialNumberObj)\n            }\n            const data = {\n                code: item.code,\n                total_amt: item.total_amt.substring(1), // remove $\n                newQty: item.qty\n            }\n            await postRequest(apiEndpoint + \"/updateCost\", data)\n        }\n\n        // update purchases\n        for (let i = 0; i < itemListCoded.length; i++) {\n            const item = itemListCoded[i]\n            const data = {\n                supplier: supplier,\n                invoice_no: invoiceNumber,\n                category: item.category,\n                brand: item.brand,\n                detailed: item.model,\n                color: item.color,\n                desc: item.desc,\n                invoice_date: today,\n                total_amt: item.total_amt,\n                qty: item.qty\n            }\n            await postRequest(apiEndpoint + \"/purchases\", data)\n        }\n        // update new locations\n        for (let i = 0; i < itemListCoded.length; i++) {\n            const item = itemListCoded[i]\n            const itemRow = await checkItemRow(item.code)\n            const currLocationRes = await postRequest(apiEndpoint + '/inventoryGetLoc', {row: itemRow})\n            const currLocation = toLocObjectArray(currLocationRes.data.inventoryLoc)\n            let newLocations;\n            if (currLocation.filter(loc => loc.name === \"DE\").length === 1) {\n                // Adding to item that has pending delivery\n                newLocations = currLocation.map(loc => {\n                    if (loc.name === \"DE\") {\n                        const newQty = parseInt(loc.qty) + parseInt(item.qty)\n                        return {\n                            name: \"DE\",\n                            qty: newQty\n                        }\n                    }\n                    return loc\n                })\n            } else {\n                // Item has no pending delivery\n                newLocations = [... currLocation, {name: \"DE\", qty: item.qty}]\n            }\n            const updatedNewLocationsString = toLocString(newLocations)\n            await postRequest(apiEndpoint + '/inventoryUpdateLoc', {row: itemRow, location: updatedNewLocationsString})\n        }\n\n        // add cce_out\n        for (let i = 0; i < itemListCoded.length; i++) {\n            const item = itemListCoded[i]\n            const lastCceIndexData = await getRequest(apiEndpoint + \"/cce_out\")\n            let lastCashOutIndex = lastCceIndexData.data.lastCashOutIndex\n            if (!lastCashOutIndex.startsWith(\"CO\")) {\n                lastCashOutIndex = \"CO000\"\n            }\n            const lastCashOutRow = lastCceIndexData.data.row\n            const currCashOutIndex = generateNextCashInOutIndexNumber(lastCashOutIndex)\n            const currCashOutRow = parseInt(lastCashOutRow) + 1\n            const createLastCashOutObject = {\n                indexNumber: currCashOutIndex,\n                date: today,\n                description: item.code,\n                amount: item.total_amt,\n                remarks: \"NA\",\n                row: currCashOutRow\n            }\n            await postRequest(apiEndpoint + '/cce_out', createLastCashOutObject)\n        }\n        props.navigate(\"orderSubmitted\")\n    }\n\n    const activeButton = () => {\n        return (\n            <div className=\"form-button\" onClick={submitPurchase}>Submit Purchase</div>\n        )\n    }\n\n    const inactiveButton = () => {\n        return (\n            <div className=\"form-button-inactive\">Submit Purchase</div>\n        )\n    }\n\n    const warningMessageComponent = (warningMessage) => {\n        return (\n            <span className=\"warning-message\">{warningMessage}</span>\n        )\n    }\n\n    return ( isLoading ? <RHQLoader message={\"Creating form...\"}/> : (\n            <div className=\"form\">\n                <span className=\"form-header\">Purchase Form</span>\n                <div className=\"form-label-container\">\n                    <span className=\"form-label\">Supplier</span>\n                </div>\n                <input className=\"input-box\" type=\"text\" onChange={e => setSupplier(e.target.value)}/>\n                <div className=\"form-label-container\">\n                    <span className=\"form-label\">Invoice no</span>\n                </div>\n                <input className=\"input-box\" type=\"text\" onChange={e => setInvoiceNumber(e.target.value)}/>\n                {itemList.map((e) => {\n                    return itemPropertiesComponent(e.index)\n                })}\n                <div className=\"search-item-row\" onClick={() => addItem(true)}>\n                    <span className=\"button-item-name\">+ Add new product</span>\n                </div>\n                <div className=\"search-item-row\" onClick={() => addItem(false)}>\n                    <span className=\"button-item-name\">+ Add existing product</span>\n                </div>\n                <div className=\"form-label-container\">\n                    <span className=\"form-label\">Boss in-charge</span>\n                </div>\n                <input className=\"input-box\" type=\"text\" onChange={e => setBossName(e.target.value)}/>\n                {isWarningMessageVisible && warningMessageComponent(warningMessage)}\n                {canSubmit()\n                    ? activeButton()\n                    : submitting\n                        ? <RHQLoader message={\"Submitting...\"}/>\n                        : inactiveButton()}\n            </div>\n        )\n    )\n}\n\nexport default AddPurchaseForm;\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpenses/addExpensesForm.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchase/pendingPurchaseList.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/performance/performanceGraph.js",["109"],"import React, {useEffect, useState} from \"react\";\nimport {Bar} from \"react-chartjs-2\";\nimport Chart from 'chart.js/auto';\nimport {getRequest} from \"../../requestBuilder\";\nimport {apiEndpoint} from \"../../common\";\n\nconst PerformanceGraph = (props) => {\n    const [labels, setLabels] = useState([]);\n    const [profits, setProfits] = useState([]);\n    useEffect(() => {\n       loadProfits();\n    }, [])\n\n    const loadProfits = async () => {\n        const profitObjs = await getRequest(apiEndpoint + '/performance');\n        setLabels(profitObjs.data.performance.map(obj => obj.month));\n        setProfits(profitObjs.data.performance.map(obj => parseFloat(obj.profit.substring(1))));\n    }\n\n    const state = {\n        labels: labels,\n        datasets: [\n            {\n                label: 'Profit',\n                backgroundColor: 'rgba(75,192,192,1)',\n                data: profits,\n                maxBarThickness: 20\n            }\n        ]\n    }\n\n    return (\n        <div className=\"performance-graph\">\n            <Bar\n                data={state}\n                options={{\n                    title:{\n                        display:true,\n                        text:'Profit per month',\n                        fontSize:20\n                    },\n                    legend:{\n                        display:true,\n                        position:'right',\n                        color: '#ffffff'\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nexport default PerformanceGraph;\n",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":4,"column":22,"nodeType":"116","messageId":"117","endLine":4,"endColumn":33},{"ruleId":"118","severity":1,"message":"119","line":52,"column":25,"nodeType":"120","messageId":"121","endLine":52,"endColumn":26},{"ruleId":"114","severity":1,"message":"122","line":23,"column":12,"nodeType":"116","messageId":"117","endLine":23,"endColumn":17},{"ruleId":"123","severity":1,"message":"124","line":69,"column":8,"nodeType":"125","endLine":69,"endColumn":10,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":261,"column":13,"nodeType":"129","messageId":"130","endLine":291,"endColumn":45},{"ruleId":"131","severity":1,"message":"132","line":321,"column":36,"nodeType":"133","messageId":"134","endLine":321,"endColumn":37,"fix":"135"},{"ruleId":"114","severity":1,"message":"136","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":13},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'deviceWidth' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'query' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUpOrderForm'. Either include it or remove the dependency array.","ArrayExpression",["139"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"140","text":"141"},"'Chart' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},[13781,13782],"","Update the dependencies array to be: [setUpOrderForm]",{"range":"144","text":"145"},[2755,2757],"[setUpOrderForm]"]