[{"/Users/hoholyin/Desktop/Personal/rhq/src/index.js":"1","/Users/hoholyin/Desktop/Personal/rhq/src/App.js":"2","/Users/hoholyin/Desktop/Personal/rhq/src/reportWebVitals.js":"3","/Users/hoholyin/Desktop/Personal/rhq/src/common.js":"4","/Users/hoholyin/Desktop/Personal/rhq/src/requestBuilder.js":"5","/Users/hoholyin/Desktop/Personal/rhq/src/Home.js":"6","/Users/hoholyin/Desktop/Personal/rhq/src/pages/orderSubmittedPage.js":"7","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrderPage.js":"8","/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventoryPage.js":"9","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrderForm.js":"10","/Users/hoholyin/Desktop/Personal/rhq/src/pages/InventoryList.js":"11","/Users/hoholyin/Desktop/Personal/rhq/src/pages/formComponents.js":"12","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpensesPage.js":"13","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpensesForm.js":"14","/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrdersPage.js":"15","/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrdersList.js":"16","/Users/hoholyin/Desktop/Personal/rhq/src/RHQLoader.js":"17","/Users/hoholyin/Desktop/Personal/rhq/src/mailslip.js":"18","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchasePage.js":"19","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchaseForm.js":"20","/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchasePage.js":"21","/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingPurchaseList.js":"22"},{"size":442,"mtime":1627027803034,"results":"23","hashOfConfig":"24"},{"size":2234,"mtime":1652196000938,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1626788179110,"results":"26","hashOfConfig":"27"},{"size":178270,"mtime":1652629064794,"results":"28","hashOfConfig":"24"},{"size":889,"mtime":1628694390333,"results":"29","hashOfConfig":"24"},{"size":1063,"mtime":1652196019968,"results":"30","hashOfConfig":"24"},{"size":631,"mtime":1640332083488,"results":"31","hashOfConfig":"24"},{"size":809,"mtime":1645254384646,"results":"32","hashOfConfig":"24"},{"size":7823,"mtime":1652427167192,"results":"33","hashOfConfig":"24"},{"size":19056,"mtime":1652629194208,"results":"34","hashOfConfig":"24"},{"size":942,"mtime":1633681417235,"results":"35","hashOfConfig":"24"},{"size":702,"mtime":1627025087120,"results":"36","hashOfConfig":"24"},{"size":504,"mtime":1630641688352,"results":"37","hashOfConfig":"24"},{"size":7809,"mtime":1647490223878,"results":"38","hashOfConfig":"24"},{"size":5169,"mtime":1652681490795,"results":"39","hashOfConfig":"24"},{"size":2104,"mtime":1648882031109,"results":"40","hashOfConfig":"24"},{"size":556,"mtime":1652334142602,"results":"41","hashOfConfig":"24"},{"size":2605,"mtime":1652015624014,"results":"42","hashOfConfig":"24"},{"size":807,"mtime":1652091849335,"results":"43","hashOfConfig":"24"},{"size":12272,"mtime":1654043500142,"results":"44","hashOfConfig":"24"},{"size":5671,"mtime":1652235998124,"results":"45","hashOfConfig":"24"},{"size":1667,"mtime":1652198004063,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"19x70hs",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"enfqkt",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/hoholyin/Desktop/Personal/rhq/src/index.js",[],["97","98"],"/Users/hoholyin/Desktop/Personal/rhq/src/App.js",["99"],"import React, {useState} from \"react\";\nimport Home from \"./Home\";\nimport SubmitOrderPage from \"./pages/submitOrderPage\";\nimport OrderSubmittedPage from \"./pages/orderSubmittedPage\";\nimport CheckInventoryPage from \"./pages/checkInventoryPage\";\nimport AddExpensesPage from \"./pages/addExpensesPage\";\nimport AddPurchasePage from \"./pages/addPurchasePage\";\nimport PendingOrdersPage from \"./pages/pendingOrdersPage\";\nimport ManageOrdersPage from \"./pages/managePurchasePage\";\nimport ManagePurchasePage from \"./pages/managePurchasePage\";\n\nfunction App() {\n    const setPage = (page) => {\n        const res = page.split(\"/\");\n        const path = res[res.length - 1]\n        switch (path) {\n            case \"\":\n                return (\n                    <Home navigate={setCurrentPage} />\n                )\n            case \"checkInventory\":\n                return (\n                    <CheckInventoryPage navigate={setCurrentPage}/>\n                )\n            case \"pendingOrders\":\n                return (\n                    <PendingOrdersPage navigate={setCurrentPage}/>\n                )\n            case \"submitOrder\":\n                return (\n                    <SubmitOrderPage navigate={setCurrentPage}/>\n                )\n            case \"addExpenses\":\n                return (\n                    <AddExpensesPage navigate={setCurrentPage}/>\n                )\n            case \"addPurchase\":\n                return (\n                    <AddPurchasePage navigate={setCurrentPage}/>\n                )\n            case \"managePurchase\":\n                return (\n                    <ManagePurchasePage navigate={setCurrentPage}/>\n                )\n            case \"orderSubmitted\":\n                return (\n                    <OrderSubmittedPage navigate={setCurrentPage}/>\n                )\n           default:\n               return (\n                   <Home navigate={setCurrentPage} />\n               )\n        }\n    }\n\n    const getPage = () => {\n        const url = window.location.href.split(\"/\");\n        return url[url.length - 1];\n    }\n\n    const [currentPage, setCurrentPage] = useState(getPage());\n\n    return (\n    <div className=\"App\">\n        {setPage(currentPage)}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/hoholyin/Desktop/Personal/rhq/src/reportWebVitals.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/common.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/requestBuilder.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/Home.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/orderSubmittedPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrderPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/checkInventoryPage.js",["100"],"import logo from \"../assets/logo_transparent.png\";\nimport InventoryList from \"./InventoryList\";\nimport {apiEndpoint, isBossCorrect, updatePrice} from \"../common\";\nimport {getRequest, postRequest} from \"../requestBuilder\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./checkInventoryPage.css\"\nimport back from \"../assets/back.png\";\nimport refresh from \"../assets/refresh.png\";\nimport cross from \"../assets/cross.png\";\nimport RHQLoader from \"../RHQLoader\";\n\nconst CheckInventoryPage = (props) => {\n    const [inventoryList, setInventoryList] = useState([]);\n    const [allInventories, setAllInventories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [query, setQuery] = useState(\"\");\n    const [selectedCode, setSelectedCode] = useState(\"\")\n    const [indicatorInformation, setIndicatorInformation] = useState([]);\n    const [isLoadingSelection, setIsLoadingSelection] = useState(true);\n    const [sellingPrice, setSellingPrice] = useState(\"$\")\n    const [oldSellingPrice, setOldSellingPrice] = useState(\"$\")\n    const [bossName, setBossName] = useState(\"\")\n    const [submitting, setSubmitting] = useState(false)\n\n    useEffect(() => {\n        refreshInventory();\n    }, [])\n\n    const search = (searchQuery) => {\n        setQuery(searchQuery)\n        if (searchQuery === \"\") {\n            return\n        }\n        const allWords = searchQuery.split(\"-\")\n        const filteredItems = allInventories.filter((e) => {\n            for (const word of allWords) {\n                if (!e.code.toLowerCase().includes(word.toLowerCase())) {\n                    return false\n                }\n            }\n            return true\n        })\n        setInventoryList(filteredItems)\n    }\n\n    const refreshInventory = async () => {\n        setIsLoading(true)\n        const inventoryListObject = await getRequest(apiEndpoint + '/inventory')\n        const allInventories = inventoryListObject.data.allInventories\n        allInventories.map((e) => {\n            e.name = e.code\n            e.name = e.name.replaceAll(\"NA\", \"\")\n            e.name = e.name.replaceAll(\"Phone accessories\", \"\")\n            e.name = e.name.replaceAll(\"Airpods case\", \"\")\n            e.name = e.name.replaceAll(\"Phone case\", \"\")\n            return e\n        })\n        setAllInventories(allInventories)\n        setInventoryList(allInventories)\n        setIsLoading(false)\n    }\n\n    const selectCode = async (code) => {\n        setSelectedCode(\"a\")\n        setIsLoadingSelection(true)\n        const requestObj = {\n            code: code\n        }\n        const allIndicatorsObject = await postRequest(apiEndpoint + '/indicator', requestObj)\n        const allIndicators = allIndicatorsObject.data.allIndicators.map((x) => {\n            return x.replaceAll(/\\s/g, '').length === 0 ? 0 : x;\n        })\n        const allIndicatorObjects = [\n            {\n                name: 'Units Sold',\n                val: allIndicators[0]\n            },\n            {\n                name: 'Stock in Qty Units',\n                val: allIndicators[1]\n            },\n            {\n                name: 'Restock Count',\n                val: allIndicators[2]\n            },\n            {\n                name: 'Margin',\n                val: allIndicators[3]\n            }\n        ];\n        const sellingPriceRequestObj = {\n            code: code\n        }\n        const sellingPriceObj = await postRequest(apiEndpoint + '/getSellingPrice', sellingPriceRequestObj)\n        const sellingPrice = sellingPriceObj.data.sellingPrice\n        setSellingPrice(sellingPrice)\n        setOldSellingPrice(sellingPrice)\n        setIndicatorInformation(allIndicatorObjects)\n        setSelectedCode(code);\n        setIsLoadingSelection(false)\n    }\n\n    const unselectItem = () => {\n        setSelectedCode(\"\")\n    }\n\n    const updateSellingPrice = async () => {\n        setSubmitting(true)\n        const correctBoss = await isBossCorrect(bossName)\n        if (!correctBoss) {\n            setSubmitting(false)\n            return\n        }\n        const dataObject = {\n            code: selectedCode,\n            sellingPrice: sellingPrice\n        }\n        await postRequest(apiEndpoint + \"/setSellingPrice\", dataObject)\n        const sellingPriceRequestObj = {\n            code: selectedCode\n        }\n        const sellingPriceObj = await postRequest(apiEndpoint + '/getSellingPrice', sellingPriceRequestObj)\n        const localSellingPrice = sellingPriceObj.data.sellingPrice\n        setSellingPrice(localSellingPrice)\n        setOldSellingPrice(localSellingPrice)\n        setSubmitting(false)\n    }\n\n    const confirmationContainer = () => {\n        return (\n            <div className=\"confirmation-container\">\n                <span className=\"form-label\">Boss</span>\n                <div className=\"confirmation-input-row\">\n                    <input className=\"input-box\" type=\"text\" onChange={e => setBossName(e.target.value)}/>\n                    {submitting ? <RHQLoader message={\"\"}/> : <div className=\"form-button-confirmation\" onClick={updateSellingPrice}>Update Price</div> }\n                </div>\n            </div>\n        )\n    }\n\n    const selectedCodeModal = () => {\n        return (\n            <div className=\"inv-selected-code-modal\">\n                <div className=\"inv-selected-code-heading\">\n                    <span className=\"inv-selected-item-name\">{selectedCode}</span>\n                    <div className=\"inv-remove-selection\" onClick={() => unselectItem()}>\n                        <img src={cross} className=\"remove-selection-icon\" alt=\"logo\"/>\n                    </div>\n                </div>\n                <div className=\"indicator-container\">\n                    {indicatorInformation.map((obj) => {\n                        return (\n                            <div className=\"indicator-column\">\n                                <div className=\"indicator-header\">{obj.name}</div>\n                                <div className=\"indicator-value\">{obj.val}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div className=\"selling-price-container\">\n                    <span className=\"selling-price-header\">SELLING PRICE</span>\n                    <input className=\"input-box\" type=\"text\" value={sellingPrice} onChange={e => updatePrice(e.target.value, setSellingPrice)}/>\n                    {sellingPrice !== oldSellingPrice && confirmationContainer()}\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"button-containers\">\n                <div className=\"back-button-container\" onClick={() => props.navigate(\"\")}>\n                    <img src={back} className=\"back-button interactive\" alt=\"back\"/>\n                </div>\n                <div className=\"refresh-button-container\" onClick={refreshInventory}>\n                    <img src={refresh} className=\"refresh-button interactive\" alt=\"refresh\"/>\n                </div>\n            </div>\n            <div className=\"logo-container interactive\" onClick={() => props.navigate(\"\")}>\n                <img src={logo} className=\"submit-order-app-logo\" alt=\"logo\"/>\n            </div>\n            {!isLoading && <input className=\"input-box\" type=\"text\" onChange={e => search(e.target.value)}/>}\n            {selectedCode !== \"\"\n                ? isLoadingSelection ? <RHQLoader message={\"Can wait abit anot...\"}/> : selectedCodeModal()\n                : null }\n            <div className=\"inventory-list-container\">\n                {isLoading\n                    ? <RHQLoader message={\"Getting inventory list...\"}/>\n                    :<InventoryList inventoryList={inventoryList} elementOnClick={selectCode}/>}\n            </div>\n        </div>\n    )\n}\n\nexport default CheckInventoryPage;\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/submitOrderForm.js",["101","102"],"import {\n    addPrice,\n    apiEndpoint, checkItemRow,\n    generateNextCashInOutIndexNumber,\n    generateNextInvoiceNumber,\n    generateTodayDate, isBossCorrect, isInteger, isPrice, itemExists,\n    toLocObjectArray, toLocString, updatePrice\n} from \"../common\";\nimport tick from \"../assets/tick.png\";\nimport cross from \"../assets/cross.png\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./submitOrderForm.css\";\nimport {getRequest, postRequest} from \"../requestBuilder\";\nimport RHQLoader from \"../RHQLoader\";\n\nconst SubmitOrderForm = (props) => {\n    const [customerName, setCustomerName] = useState(\"\");\n    const [address, setAddress] = useState(\"\")\n    const [amount, setAmount] = useState(\"$0.00\")\n    const [stamps, setStamps] = useState(\"$0.60\")\n    const [remarks, setRemarks] = useState(\"Pending\")\n    const [tips, setTips] = useState(\"$0.00\")\n    const [bossName, setBossName] = useState(\"\")\n    const [items, setItems] = useState([])\n    const [searchQuery, setSearchQuery] = useState(\"\")\n    const [inventoryList, setInventoryList] = useState([]);\n    const [blacklist, setBlacklist] = useState([]);\n    const [allInventories, setAllInventories] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isInBlacklist, setIsInBlacklist] = useState(false);\n\n    const [isStatusMessagesVisible, setStatusMessagesVisible] = useState(false)\n    const [bossCheckCorrect, setBossCheckCorrect] = useState(0)\n    const [itemInStockCheckCorrect, setItemInStockCheckCorrect] = useState(0)\n    const [updatingInventoryCheckCorrect, setUpdatingInventoryCheckCorrect] = useState(0)\n    const [submittingOrderCheckCorrect, setSubmittingOrderCheckCorrect] = useState(0)\n    const [updatingAccountsCheckCorrect, setUpdatingAccountsCheckCorrect] = useState(0)\n\n    const indicators = [\n        {\n            indicator: bossCheckCorrect,\n            setter: setBossCheckCorrect\n        },\n        {\n            indicator: itemInStockCheckCorrect,\n            setter: setItemInStockCheckCorrect\n        },\n        {\n            indicator: updatingInventoryCheckCorrect,\n            setter: setUpdatingInventoryCheckCorrect\n        },\n        {\n            indicator: submittingOrderCheckCorrect,\n            setter: setSubmittingOrderCheckCorrect\n        },\n        {\n            indicator: updatingAccountsCheckCorrect,\n            setter: setUpdatingAccountsCheckCorrect\n        }\n    ]\n\n    const [submitting, setSubmitting] = useState(false)\n\n    const [isWarningMessageVisible, setWarningMessageVisible] = useState(false)\n    const [warningMessage, setWarningMessage] = useState(\"\")\n\n    useEffect(() => {\n        setUpOrderForm()\n    }, [])\n\n    const setUpOrderForm = async () => {\n        setIsLoading(true)\n        const inventoryListObject = await getRequest(apiEndpoint + '/inventory')\n        const allInventories = inventoryListObject.data.allInventories\n        allInventories.map((e) => {\n            e.name = e.code\n            e.name = e.name.replaceAll(\"NA\", \"\")\n            e.name = e.name.replaceAll(\"Phone accessories\", \"\")\n            return e\n        })\n        setAllInventories(allInventories)\n        setInventoryList(allInventories)\n        const allNames = await getBlacklist()\n        setBlacklist(allNames)\n        setIsLoading(false)\n    }\n\n    const getBlacklist = async () => {\n        const blacklistObject = await getRequest(apiEndpoint + '/blacklist')\n        return blacklistObject.data.allNames\n    }\n\n\n    const setQty = (code, qty) => {\n        if (!isInteger(qty) || parseInt(qty) < 0) {\n            qty = 0\n        }\n        const oldItems = [...items]\n        oldItems.map((item) => {\n            if (item.obj.code === code) {\n                item.qty = qty\n            }\n            return item\n        })\n        setItems(oldItems)\n        let newPrice = \"$0.00\"\n        oldItems.forEach((item) => {\n            for (let i = 0; i < item.qty; i++) {\n                newPrice = addPrice(newPrice, item.obj.price)\n            }\n        })\n        updatePrice(newPrice, setAmount)\n    }\n\n    const setWarning = (warningMessage) => {\n        setWarningMessage(warningMessage)\n        setWarningMessageVisible(true)\n    }\n\n    const resetWarningMessages = () => {\n        setWarningMessageVisible(false)\n        setWarningMessage(\"\")\n    }\n\n    const resetStatusMessages = () => {\n        setStatusMessagesVisible(false)\n        setBossCheckCorrect(0)\n        setItemInStockCheckCorrect(0)\n        setUpdatingInventoryCheckCorrect(0)\n        setSubmittingOrderCheckCorrect(0)\n        setUpdatingAccountsCheckCorrect(0)\n    }\n\n    const verifyAndSetCustomerName = (name) => {\n        if (blacklist.includes(name)) {\n            // Is in blacklist\n            setIsInBlacklist(true)\n        } else {\n            setIsInBlacklist(false)\n        }\n        setCustomerName(name)\n    }\n\n    const submitOrder = async () => {\n        try {\n            setStatusMessagesVisible(false)\n            setSubmitting(true)\n            resetWarningMessages()\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i]\n                if (!/^[1-9]\\d*$/.test(item.qty)) {\n                    setWarning(\"Invalid quantity!\")\n                    setSubmitting(false)\n                    return\n                }\n            }\n\n            setAmount(amount === \"$\" ? \"$0.00\" : amount)\n            setTips(tips === \"$\" ? \"$0.00\" : tips)\n            setStamps(stamps === \"$\" ? \"$0.00\" : stamps)\n\n            if (!isPrice(amount)) {\n                setWarning(\"Invalid amount!\")\n                setSubmitting(false)\n                return\n            }\n\n            if (!isPrice(tips)) {\n                setWarning(\"Invalid tips!\")\n                setSubmitting(false)\n                return\n            }\n\n            if (!isPrice(stamps)) {\n                setWarning(\"Invalid stamps!\")\n                setSubmitting(false)\n                return\n            }\n            resetStatusMessages()\n            setStatusMessagesVisible(true)\n\n            const correctBoss = await isBossCorrect(bossName)\n            if (!correctBoss) {\n                setBossCheckCorrect(2)\n                setSubmitting(false)\n                return\n            }\n            setBossCheckCorrect(1)\n\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i]\n                const itemRow = await checkItemRow(item.obj.code);\n                const currLocationRes = await postRequest(apiEndpoint + '/inventoryGetLoc', {row: itemRow})\n                const currLocation = toLocObjectArray(currLocationRes.data.inventoryLoc)\n                let inStock = false\n                let noStock = true\n                currLocation.forEach((e) => {\n                    if (e.name.toUpperCase() === bossName.toUpperCase()) {\n                        inStock = e.qty >= item.qty\n                        if (inStock) {\n                            noStock = false\n                        }\n                    }\n                })\n                if (noStock) {\n                    setItemInStockCheckCorrect(2)\n                    setSubmitting(false)\n                    return\n                }\n                setItemInStockCheckCorrect(1)\n                let updatedCurrLocation = currLocation.map((e) => {\n                    if (e.name.toUpperCase() === bossName.toUpperCase()) {\n                        return {\n                            name: e.name,\n                            qty: e.qty - item.qty\n                        }\n                    }\n                    return e\n                }).filter((e) => e.qty > 0)\n                const updatedCurrLocationString = toLocString(updatedCurrLocation)\n                await postRequest(apiEndpoint + '/inventoryUpdateLoc', {row: itemRow, location: updatedCurrLocationString})\n            }\n            setUpdatingInventoryCheckCorrect(1)\n\n            const today = generateTodayDate()\n            let firstInvoiceNumber;\n            console.log(\"invoice number done\")\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i]\n                const getOrdersInfo = await getRequest(apiEndpoint + \"/orders\")\n                const lastInvoiceNumber = getOrdersInfo.data.lastInvoiceNumber\n                const nextSalesRow = (parseInt(getOrdersInfo.data.lastSalesRow) + 1).toString()\n                const netSalesFormula = \"=M{}-R{}\".replace(/{}/g, nextSalesRow)\n                const cogNetFormula = \"=T{}*L{}\".replace(/{}/g, nextSalesRow)\n                const currInvoiceNumber = generateNextInvoiceNumber(lastInvoiceNumber)\n                firstInvoiceNumber = !firstInvoiceNumber ? currInvoiceNumber : firstInvoiceNumber\n                const order = {\n                    code: item.obj.code,\n                    customer: customerName,\n                    invoice_number: currInvoiceNumber,\n                    invoice_date: today,\n                    qty: item.qty,\n                    amt: i === 0 ? amount : \"$0.00\",\n                    tips: tips,\n                    stamps: stamps,\n                    remarks: remarks,\n                    bossName: bossName.toUpperCase(),\n                    address: address,\n                    cog: item.obj.cost,\n                    netSalesFormula: netSalesFormula,\n                    cogNetFormula: cogNetFormula\n                }\n                console.log(\"before\")\n                await postRequest(apiEndpoint + '/order', order)\n                console.log(\"after\")\n            }\n            if (tips !== \"$0.00\") {\n                const tipsObject = {\n                    customer: customerName,\n                    invoice_number: firstInvoiceNumber,\n                    tipAmount: tips\n                }\n                await postRequest(apiEndpoint + '/addTips', tipsObject)\n            }\n            const getLastCashIn = await getRequest(apiEndpoint + \"/cce_in\")\n            let lastCashInIndex = getLastCashIn.data.lastCashInIndex\n            if (!lastCashInIndex.startsWith(\"CI\")) {\n                lastCashInIndex = \"CI000\"\n            }\n            const lastCashInRow = getLastCashIn.data.row\n            const currCashInIndex = generateNextCashInOutIndexNumber(lastCashInIndex)\n            const cashInDescription = \"Sales - \" + firstInvoiceNumber\n            const currCashInRow = parseInt(lastCashInRow) + 1\n            const createLastCashInObject = {\n                indexNumber: currCashInIndex,\n                date: today,\n                description: cashInDescription,\n                amount: addPrice(amount, tips),\n                row: currCashInRow\n            }\n            await postRequest(apiEndpoint + '/cce_in', createLastCashInObject)\n            setSubmittingOrderCheckCorrect(1)\n            setUpdatingAccountsCheckCorrect(1)\n            setSubmitting(false)\n            props.navigate(\"orderSubmitted\")\n        } catch (err) {\n            for (const element in indicators) {\n                if (element.indicator === 0) {\n                    element.setter(2)\n                    break\n                }\n            }\n        }\n    }\n\n    const canSubmit = () => {\n        return customerName !== \"\"\n            && amount !== \"\"\n            && stamps !== \"\"\n            && bossName !== \"\"\n            && submitting === false\n    }\n\n    const statusMessageComponent = () => {\n        return (\n            <div className=\"status-messages-container\">\n                <div className=\"status-message-row\">\n                    <span className=\"status-message\">Boss correct</span>\n                    {bossCheckCorrect === 1 && <img src={tick} className=\"status-icon\" alt=\"logo\"/>}\n                    {bossCheckCorrect === 2 && <img src={cross} className=\"status-icon\" alt=\"logo\"/>}\n                </div>\n                <div className=\"status-message-row\">\n                    <span className=\"status-message\">In stock</span>\n                    {itemInStockCheckCorrect === 1 && <img src={tick} className=\"status-icon\" alt=\"logo\"/>}\n                    {itemInStockCheckCorrect === 2 && <img src={cross} className=\"status-icon\" alt=\"logo\"/>}\n                </div>\n                <div className=\"status-message-row\">\n                    <span className=\"status-message\">Updating inventory</span>\n                    {updatingInventoryCheckCorrect === 1 && <img src={tick} className=\"status-icon\" alt=\"logo\"/>}\n                    {updatingInventoryCheckCorrect === 2 && <img src={cross} className=\"status-icon\" alt=\"logo\"/>}\n                </div>\n                <div className=\"status-message-row\">\n                    <span className=\"status-message\">Submitting order</span>\n                    {submittingOrderCheckCorrect === 1 && <img src={tick} className=\"status-icon\" alt=\"logo\"/>}\n                    {submittingOrderCheckCorrect === 2 && <img src={cross} className=\"status-icon\" alt=\"logo\"/>}\n                </div>\n                <div className=\"status-message-row\">\n                    <span className=\"status-message\">Updating accounts</span>\n                    {updatingAccountsCheckCorrect === 1 && <img src={tick} className=\"status-icon\" alt=\"logo\"/>}\n                    {updatingAccountsCheckCorrect === 2 && <img src={cross} className=\"status-icon\" alt=\"logo\"/>}\n                </div>\n            </div>\n        )\n    }\n\n    const warningMessageComponent = (warningMessage) => {\n        return (\n            <span className=\"warning-message\">{warningMessage}</span>\n        )\n    }\n\n    const inactiveButton = () => {\n       return (\n           <div className=\"form-button-inactive\">Submit Order</div>\n       )\n    }\n\n    const activeButton = () => {\n        return (\n            <div className=\"form-button\" onClick={submitOrder}>Submit Order</div>\n        )\n    }\n\n    const search = (query) => {\n        setSearchQuery(query)\n        const allWords = searchQuery.split(\" \")\n        const filteredItems = allInventories.filter((e) => {\n            for (const word of allWords) {\n                if (!e.code.toLowerCase().includes(word.toLowerCase())) {\n                    return false\n                }\n            }\n            return items.filter((item) => item.code === e.code).length <= 0;\n        })\n        setInventoryList(filteredItems)\n    }\n\n    const selectedCodeModal = () => {\n        const allProcessedWords = items.map((item) => {\n            const code = item.obj.code\n            const processedWord = item.obj.code.replace(/NA-/, \"\").replace(/-/g, \"\\n\")\n            return { processedWord: processedWord, code: code }\n        })\n        return (\n            <div className=\"selected-code-list\">\n                {allProcessedWords.map((processedWordObj) => {\n                    return (\n                        <div className=\"selected-code-modal\">\n                            <div className=\"qty-container\">\n                                <span className=\"form-label\">Name</span>\n                                <span className=\"selected-item-name\">{processedWordObj.processedWord}</span>\n                            </div>\n                            <div className=\"qty-container\">\n                                <span className=\"form-label\">Qty</span>\n                                <input className=\"qty-input\" type=\"number\" defaultValue={1} onChange={e => setQty(processedWordObj.code, e.target.value)}/>\n                            </div>\n                            <div className=\"remove-selection\" onClick={() => unselectItem(processedWordObj.code)}>\n                                <img src={cross} className=\"remove-selection-icon\" alt=\"logo\"/>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    const noItemsModal = () => {\n        return (\n            <div className=\"selected-code-modal\">\n                <span className=\"form-label\">No Items Selected!</span>\n            </div>\n        )\n    }\n\n    const unselectItem = (code) => {\n        const removed = items.filter((item) => item.obj.code !== code)\n        setItems(removed)\n        let totalPrice = \"$0.00\"\n        removed.forEach((item) => {\n            totalPrice = addPrice(totalPrice, item.obj.price)\n        })\n        updatePrice(totalPrice, setAmount)\n    }\n\n    const selectItem = (item) => {\n        const itemObj = { obj: item, qty: 1}\n        const added = [...items, itemObj]\n        setItems(added)\n        updatePrice(addPrice(amount, item.price), setAmount)\n        setSearchQuery(\"\")\n    }\n\n    return ( isLoading ? <RHQLoader message={\"Creating form...\"}/> : (\n        <div className=\"form\">\n            <span className=\"form-header\">Order Form</span>\n            <span className=\"form-label\">Customer's name</span>\n            <input className=\"input-box\" type=\"text\" onChange={e => verifyAndSetCustomerName(e.target.value)}/>\n            {isInBlacklist && <span className=\"warning-message\">Customer in blacklist!</span>}\n            <span className=\"form-label\">Mailing Address</span>\n            <input className=\"input-box\" type=\"text\" onChange={e => setAddress(e.target.value)}/>\n            <span className=\"form-label\">Search Item</span>\n            <input className=\"input-box\" placeholder=\"Start typing to search...\" type=\"text\" value={searchQuery} onChange={e => search(e.target.value)}/>\n            <span className=\"form-label\">Selected Items</span>\n            {searchQuery !== \"\" && inventoryList.map((e) => {\n                return (\n                    <div className=\"search-item-row\" onClick={() => selectItem(e)}>\n                        <span className=\"search-item-name\">{e.name}</span>\n                    </div>\n                )\n            })}\n            {items.length > 0 && selectedCodeModal()}\n            {items.length === 0 && noItemsModal()}\n            <span className=\"form-label\">Net Amount (After discount)</span>\n            <input className=\"input-box\" type=\"text\" value={amount} onChange={e => updatePrice(e.target.value, setAmount)}/>\n            <span className=\"form-label\">Stamp value</span>\n            <input className=\"input-box\" type=\"text\" value={stamps} onChange={e => updatePrice(e.target.value, setStamps)}/>\n            <span className=\"form-label\">Remarks</span>\n            <input className=\"input-box\" type=\"text\" value={remarks} onChange={e => setRemarks(e.target.value)}/>\n            <span className=\"form-label\">Tips</span>\n            <input className=\"input-box\" type=\"text\" value={tips} onChange={e => updatePrice(e.target.value, setTips)}/>\n            <span className=\"form-label\">Boss in-charge of Sale</span>\n            <input className=\"input-box\" type=\"text\" onChange={e => setBossName(e.target.value)}/>\n            {isWarningMessageVisible && warningMessageComponent(warningMessage)}\n            {isStatusMessagesVisible && statusMessageComponent()}\n            {canSubmit()\n                ? activeButton()\n                : submitting\n                    ? <RHQLoader message={\"Submitting...\"}/>\n                    : inactiveButton()}\n        </div>\n))\n}\n\nexport default SubmitOrderForm;\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/InventoryList.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/formComponents.js",[],["103","104"],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpensesPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/addExpensesForm.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrdersPage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingOrdersList.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/RHQLoader.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/mailslip.js",["105"],"import {logoBase64} from \"./common\";\n\nconst { jsPDF } = require(\"jspdf\")\n\nexport const generateMailSlip = (orders) => {\n    if (orders.length === 0) {\n        return\n    }\n    const filename = orders[0].invoice\n    const doc = new jsPDF('l', \"mm\", [190, 105])\n    populateMailSlip(doc, orders[0])\n    orders.shift()\n\n    orders.forEach((order) => {\n        doc.addPage([190, 105], \"l\")\n        populateMailSlip(doc, order)\n    })\n    doc.save(filename + \".pdf\")\n}\n\nconst populateMailSlip = (doc, order) => {\n    console.log(order)\n    doc.addImage(logoBase64, \"png\", 15, 37, 30, 30)\n    doc.setFont('Courier', 'bold')\n    doc.setFontSize(14)\n    doc.text(order.code, 10, 10)\n    doc.setFont('Courier', 'bold')\n    doc.setFontSize(28)\n    const addr = order.addr ? order.addr : \"\"\n    doc.text(\"Mailing Address:\\n\\n\" + formatAddress(addr), 48, 20)\n}\n\nconst formatAddress = (addr) => {\n    addr = addr.replace(\",\", \" \")\n    addr = addr.replaceAll(\"//\", \"\\n\")\n    console.log(addr)\n    let formatted = addr.split(\" \")\n    formatted = formatted.map((e) => {\n        e = e.trim()\n        if (e.includes(\"#\")) {\n            return \"\\n\" + e\n        }\n        if (e.includes(\"-\") && e.charAt(0) !== '#') {\n            return \"\\n#\" + e\n        }\n        if (e.toUpperCase() === \"SINGAPORE\") {\n            return \"\"\n        }\n        if ((e.length === 6 && !isNaN(e)) || (e.length === 7 && !isNaN(e.substring(1)))) {\n            while (e.length > 6) {\n                e = e.substring(1)\n            }\n            return \"S(\" + e + \")\"\n        }\n        if (e.toUpperCase() === \"BLK\" || e.toUpperCase() === \"BLOCK\") {\n            return \"\\n\" + \"Blk\"\n        }\n        if (e.length > 0 && !isNaN(e.charAt(0))) {\n            return e\n        }\n        return e.charAt(0).toUpperCase() + e.slice(1)\n    })\n    formatted = formatted.map((e) => {\n        if (e.includes(\"(\") && e.includes(\")\")) {\n            return \"\\n\" + e\n        }\n        return e\n    })\n    formatted = formatted.join(\" \").trim()\n    // smart indent\n    let lines = formatted.split(\"\\n\")\n    let formattedLines = []\n    lines.forEach((line) => {\n        const words = line.split(\" \")\n        let window = \"\"\n        let next = 0\n        while (next !== -1) {\n            while (next !== -1  && (window + \" \" + words[next]).length < 23) {\n                window += \" \" + words[next]\n                next = next >= words.length - 1 ? -1 : next + 1\n            }\n            formattedLines.push(window.trimLeft())\n            window = \"\"\n        }\n    })\n    formattedLines = formattedLines.filter(l => l !== \"\")\n    return formattedLines.join(\"\\n\")\n}\n","/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchasePage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/addPurchaseForm.js",["106","107","108","109"],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/managePurchasePage.js",[],"/Users/hoholyin/Desktop/Personal/rhq/src/pages/pendingPurchaseList.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":24},{"ruleId":"114","severity":1,"message":"118","line":16,"column":12,"nodeType":"116","messageId":"117","endLine":16,"endColumn":17},{"ruleId":"114","severity":1,"message":"119","line":6,"column":59,"nodeType":"116","messageId":"117","endLine":6,"endColumn":69},{"ruleId":"120","severity":1,"message":"121","line":69,"column":8,"nodeType":"122","endLine":69,"endColumn":10,"suggestions":"123"},{"ruleId":"110","replacedBy":"124"},{"ruleId":"112","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":56,"column":25,"nodeType":"128","messageId":"129","endLine":56,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":54,"column":33,"nodeType":"132","messageId":"133","endLine":54,"endColumn":34,"fix":"134"},{"ruleId":"130","severity":1,"message":"131","line":68,"column":33,"nodeType":"132","messageId":"133","endLine":68,"endColumn":34,"fix":"135"},{"ruleId":"130","severity":1,"message":"131","line":117,"column":33,"nodeType":"132","messageId":"133","endLine":117,"endColumn":34,"fix":"136"},{"ruleId":"130","severity":1,"message":"131","line":224,"column":36,"nodeType":"132","messageId":"133","endLine":224,"endColumn":37,"fix":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'ManageOrdersPage' is defined but never used.","Identifier","unusedVar","'query' is assigned a value but never used.","'itemExists' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUpOrderForm'. Either include it or remove the dependency array.","ArrayExpression",["140"],["138"],["139"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"141","text":"142"},{"range":"143","text":"142"},{"range":"144","text":"142"},{"range":"145","text":"142"},"no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},[2039,2040],"",[2397,2398],[3974,3975],[9209,9210],"Update the dependencies array to be: [setUpOrderForm]",{"range":"148","text":"149"},[2669,2671],"[setUpOrderForm]"]